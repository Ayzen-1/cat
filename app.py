import streamlit as st
import pandas as pd
import numpy as np
from catboost import CatBoostRegressor

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource()
def load_model():
    return CatBoostRegressor().load_model("catboost_model.cbm")

model = load_model()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –∫–æ—Ñ–µ–π–Ω–∏ —Å —Ñ–æ–Ω–æ–º –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–º
st.markdown(
    """
    <style>
        body {
            background-image: url('https://source.unsplash.com/1600x900/?coffee-shop');
            background-size: cover;
            color: #6f4e37;
            font-family: 'Arial', sans-serif;
        }
        .stButton>button {
            background-color: #d2b48c;
            color: white;
            border-radius: 8px;
            padding: 10px;
        }
        .stButton>button:hover {
            background-color: #a67b5b;
        }
        .logo {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 80px;
        }
    </style>
    <img src="https://upload.wikimedia.org/wikipedia/en/thumb/3/35/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" class="logo">
    """,
    unsafe_allow_html=True
)

st.title("‚òï Coffee Shop Revenue Predictor ‚òï")
st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —É–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–∞—à –∫–æ—Ñ–µ–π–Ω—ã–π –±–∏–∑–Ω–µ—Å!")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data()
def load_data():
    df = pd.read_csv('coffee_shop_revenue.csv')
    df = df[df['Daily_Revenue'] >= 0]
    df['Revenue_per_Employee'] = np.where(df['Number_of_Employees'] != 0,
                                          df['Daily_Revenue'] / df['Number_of_Employees'],
                                          np.nan)
    df['Marketing_Efficiency'] = np.where(df['Marketing_Spend_Per_Day'] != 0,
                                          df['Daily_Revenue'] / df['Marketing_Spend_Per_Day'],
                                          np.nan)
    df['Foot_Traffic_Conversion'] = np.where(df['Location_Foot_Traffic'] != 0,
                                             df['Number_of_Customers_Per_Day'] / df['Location_Foot_Traffic'],
                                             np.nan)
    df['Revenue_per_Operating_Hour'] = np.where(df['Operating_Hours_Per_Day'] != 0,
                                                df['Daily_Revenue'] / df['Operating_Hours_Per_Day'],
                                                np.nan)
    return df

df = load_data()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ñ–µ–π–Ω–∏")
feature_sliders = {}
features = df.drop(columns=['Daily_Revenue', 'Number_of_Customers_Per_Day', 'Operating_Hours_Per_Day']).columns
for feature in features:
    min_val = float(df[feature].min())
    max_val = float(df[feature].max())
    mean_val = float(df[feature].mean())
    feature_sliders[feature] = st.sidebar.slider(feature, min_val, max_val, mean_val)

# –°–æ–∑–¥–∞–µ–º DataFrame —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
input_df = pd.DataFrame([feature_sliders])

if st.button("‚òï –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤—ã—Ä—É—á–∫—É ‚òï"):
    prediction = model.predict(input_df)[0]
    st.success(f"### üí∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {prediction:.2f} $ –≤ –¥–µ–Ω—å")